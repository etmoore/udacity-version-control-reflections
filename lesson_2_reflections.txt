What happens when you initialize a repository? Why do you need to do it?
A hidden .git directory is created. Without this folder, there is no git repo to save commits to.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is like when you're taking wedding photos and you have to get everyone in just the right spot before you take the picture. If you've got lots offiles, it's nice to have an area where you can hold the files you're about to commit and keep them separate from all the other files that aren't part of the logical change.

How can you use the staging area to make sure you have one commit per logical change?
The staging area makes it easy to add/remove changes before saving to a commit. By using git diff, you can see if you've captured the changes you intended to capture.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches should be used whenever you're starting a new feature. They're a way to keep the master branch clean until you're ready
to merge in the new changes.

How do the diagrams help you visualize the branch structure?
They help me reason about the chain of commits - which ones know about each other.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result is a new commit that contains the commit history of both branches. We represent it the way that
we do because it's how the internal representation of the commit history exits in Git. It's the accurate
representation of the graph.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic merging is nice because it figures out what should be in the file. When Git
doesn't know, it lets you finish the process manually. This is good because it lets the developers
decide what they intended to happen rather than letting Git make assumptions and make mistakes.
